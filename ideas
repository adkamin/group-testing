cliques  = list of cliques
positive = list of positive nodes
negative = list of negative nodes
unknown  = list of unknown
init_infected = list of initially infected nodes

1. Scan the graph and save into objects: DONE
2. Search for maximum cliques and save (into objects?)
3. Test isolated nodes (cliques of size 1) (in binary fashion?) and identify the positive and the negative ones
   - save into positive, negative and remove from unknown
4. while !unknown.empty(still nodes to be tested) OR len(positive) < upperbound
   4a. do estimates
   4b. form groups based on estimates (either cliques or group od nodes with high degree)
   4c. test groups:
       - case group: 
           - positive: divide in half and repeat test
	   - negative: negative.append(nodes), unknown.remove(nodes)
       - case node:
           - positive: positive.append(node), unknown.remove(node), test unknown neighbours?, test neighbours of those neighbours? (to find the initially infected maybe)
                - if len(init_infected = stats.init_infected then: test neighbors....end
           - negative: negative.append(node), unknown.remove(node)
5. print("answer " + positive) 


Questions: 
- Should we first search for nodes that are least likely to be sick or most likely to be sick?
- How do we use lower bound?
- How to identify initially infected people?
- How to use the initially infected people and the probability?
- How to put nodes in groups to be tested? (fisrt test big cliques? Or equal groups of cliques of different size?)


Two different approaches:
- test least likely to be infected first, so small cliques and nodes with small degree
- test most likely to be infected first, so big cliques with big degree and nodes with big degree first

Ideas:
- when eliminating a node, decrease the degree of the neighbouring nodes

